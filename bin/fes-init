#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const chalk = require('chalk')
const ora = require('ora')
const path = require('path')

const { fsExistsSync } = require('../lib/utils.js')

/**
 * Usage.
 */

program
	.usage('<template-name> [project-name]')
	.option('-c, --clone', 'use git clone')
	.option('--offline', 'use cached template')

program.on('--help', () => {
	console.log('  Examples:')
	console.log()
	console.log(chalk.gray('    # create a new project with an template'))
	console.log('    $ fes init pos_seed my-project')
	console.log()
	console.log(chalk.gray('    # create a new project straight from a github template'))
	// console.log('    $ fes init username/repo my-project')
	console.log()
})

/**
 * Help.
 */

function help () {
	program.parse(process.argv)
	if (program.args.length < 1) {
		program.help()
	}
}
help()

console.log()
process.on('exit', () => {
	console.log()
})

let [ template, rawName ] = program.args

if (!rawName) {
	console.log('Please enter your project name')
	return
}

const localUrl = path.join(process.cwd(), rawName)
const isExist = fsExistsSync(localUrl)

function run () {
	// 自定义自己模板
	let downloadUrl = null
	const isCustomTemplate = template.includes('/')
	if (isCustomTemplate) {
		downloadUrl = template
	} else {
		// feseed git 仓库项目下载地址
		const officialTemplate = 'feseed/' + template
		downloadUrl = officialTemplate
	}
	
	if (isExist) {
		console.log(
			chalk.yellow(`  ${rawName} folder already exists!`)
		)
		return
	}
	// 开始下载前端种子项目
	actionDownloadFESeed(downloadUrl)
}

run()

function actionDownloadFESeed (downloadUrl) {
	const spinner = ora('downloading ... ')
	spinner.start()
	download(downloadUrl, localUrl, {}, err => {
		spinner.stop()
		if (err) {
			console.error('error: ', err)
			return
		}

		console.log('download success!')

	})
}
